/* The following code was generated by JFlex 1.6.1 */

/* User code */
package lexical.scanner.mini.c;

//Java Libraries

import java.util.ArrayList;

class Yytoken{
    public String token;
    public int line;
    public int column;
    public int length;
    public String type;
    public boolean error;

    Yytoken(String token, int line, int column, String type, boolean error){
        this.token = token;
        this.line = line;
        this.column = column+1;
        this.length = token.length()-1;
        this.type = type;
        this.error = error;
    }

    public String toString(){
        int aux = column + length;
        if(this.type.equals("T_Identifier")){
            if(token.length() > 31){
                String temp = this.token.substring(0,31);
                String aditional = this.token.substring(31);
                return temp + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type + " Number of characters greater than 31 - Discarded characters {"+aditional+"}";
            }
            else{
                return token + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type;
            }
        }
        else{
            return token + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type;
        }   
    }

    public String isError(){
        int aux = column + length;
        return "*** Line " +line+ " *** Cols "+column+"-"+aux+" *** " + type + ": '" + token +"'";
    }
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/bryan/Documents/GitHub/Lexical-scanner-Mini-C-/Lexical Scanner Mini C#/src/lexical/scanner/mini/c/Lexer.flex</tt>
 */
public class LexicalScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\40\1\36\1\52\1\41\1\35\22\0\1\37\1\54\1\50"+
    "\2\0\1\53\1\56\1\0\1\60\1\61\1\43\1\47\1\53\1\47"+
    "\1\46\1\42\1\45\11\44\1\0\1\53\1\54\1\55\1\54\2\0"+
    "\1\17\1\10\1\16\1\4\1\12\1\20\1\15\1\21\1\31\1\30"+
    "\1\33\1\11\1\23\1\5\1\2\1\24\1\30\1\14\1\32\1\6"+
    "\1\7\1\1\1\25\1\22\1\27\1\30\1\62\1\51\1\63\1\0"+
    "\1\34\1\0\1\17\1\10\1\16\1\4\1\12\1\20\1\15\1\21"+
    "\1\31\1\30\1\33\1\11\1\23\1\5\1\2\1\24\1\30\1\14"+
    "\1\32\1\6\1\7\1\1\1\25\1\22\1\27\1\30\1\64\1\57"+
    "\1\65\7\0\1\52\252\0\2\3\115\0\1\13\u1ea8\0\1\52\1\52"+
    "\u0100\0\1\26\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\5\2\1\1\6\2\3\3"+
    "\2\4\2\5\2\4\1\1\1\4\2\1\3\4\1\2"+
    "\1\0\1\6\1\0\11\2\1\0\6\2\1\6\2\2"+
    "\1\0\1\7\1\3\1\0\1\10\3\0\1\11\2\0"+
    "\1\2\1\6\1\0\2\2\1\6\1\2\1\0\2\2"+
    "\1\0\2\2\1\0\3\2\1\0\1\2\1\6\2\2"+
    "\1\3\1\0\1\7\2\0\1\5\3\0\1\2\1\12"+
    "\2\2\1\0\1\2\1\0\3\2\3\0\1\3\1\10"+
    "\3\0\2\2\1\0\1\2\1\12\3\2\2\0\3\2"+
    "\2\0\3\2\1\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\66\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\66\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e"+
    "\0\u0654\0\u068a\0\u06c0\0\66\0\u06f6\0\u072c\0\u0762\0\u0798"+
    "\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948"+
    "\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\242\0\u0a8c\0\u0ac2"+
    "\0\u0438\0\66\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0510"+
    "\0\66\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa"+
    "\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa"+
    "\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u0b9a\0\u1224"+
    "\0\u125a\0\u1290\0\u12c6\0\242\0\u12fc\0\u1332\0\u1368\0\u139e"+
    "\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u1182\0\u14e2\0\u0438"+
    "\0\u1518\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c"+
    "\0\66\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6"+
    "\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\4"+
    "\1\11\1\4\1\12\1\13\1\14\1\4\1\15\1\4"+
    "\1\16\4\4\1\17\1\2\2\4\1\20\1\21\1\4"+
    "\1\2\1\22\2\23\1\24\1\0\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\2\1\0\1\31\2\34"+
    "\1\35\1\36\1\37\1\31\1\40\1\31\1\41\1\31"+
    "\67\0\1\4\1\42\1\0\7\4\1\0\12\4\1\0"+
    "\6\4\7\0\2\4\21\0\2\4\1\0\7\4\1\0"+
    "\12\4\1\0\6\4\7\0\2\4\25\0\1\43\12\0"+
    "\1\44\2\0\1\45\43\0\1\4\1\46\1\0\7\4"+
    "\1\0\12\4\1\0\6\4\7\0\2\4\21\0\2\4"+
    "\1\0\3\4\1\47\2\4\1\50\1\0\12\4\1\0"+
    "\6\4\7\0\2\4\21\0\2\4\1\0\7\4\1\0"+
    "\1\51\4\4\1\52\4\4\1\0\6\4\7\0\2\4"+
    "\21\0\1\4\1\53\1\0\7\4\1\0\1\54\11\4"+
    "\1\0\6\4\7\0\2\4\21\0\2\4\1\0\5\4"+
    "\1\55\1\4\1\0\6\4\1\56\3\4\1\0\6\4"+
    "\7\0\2\4\26\0\1\57\60\0\2\4\1\0\6\4"+
    "\1\60\1\0\12\4\1\0\6\4\7\0\2\4\21\0"+
    "\2\4\1\0\5\4\1\61\1\4\1\0\12\4\1\0"+
    "\6\4\7\0\2\4\21\0\1\4\1\62\1\0\7\4"+
    "\1\0\3\4\1\63\6\4\1\0\6\4\7\0\2\4"+
    "\21\0\2\4\1\0\7\4\1\0\5\4\1\64\4\4"+
    "\1\0\6\4\7\0\2\4\21\0\2\4\1\0\1\4"+
    "\1\65\5\4\1\0\4\4\1\66\2\4\1\67\2\4"+
    "\1\0\6\4\7\0\2\4\21\0\2\4\1\0\2\4"+
    "\1\70\4\4\1\0\12\4\1\0\6\4\7\0\2\4"+
    "\56\0\1\23\70\0\1\23\24\0\36\71\1\72\3\71"+
    "\1\73\1\74\60\71\1\72\27\71\44\0\2\27\1\75"+
    "\41\0\1\76\21\0\2\27\1\75\63\0\2\77\20\0"+
    "\50\100\1\101\1\102\14\100\55\0\1\31\66\0\1\31"+
    "\66\0\1\31\67\0\1\31\67\0\1\31\67\0\1\31"+
    "\1\0\2\4\1\103\7\4\1\0\12\4\1\0\2\4"+
    "\1\104\3\4\7\0\2\4\26\0\1\105\103\0\1\106"+
    "\42\0\2\4\1\0\3\4\1\107\3\4\1\0\12\4"+
    "\1\0\6\4\7\0\2\4\21\0\2\4\1\0\5\4"+
    "\1\110\1\4\1\0\12\4\1\0\6\4\7\0\2\4"+
    "\21\0\2\4\1\0\7\4\1\0\11\4\1\111\1\0"+
    "\6\4\7\0\2\4\21\0\2\4\1\0\3\4\1\112"+
    "\3\4\1\0\12\4\1\0\6\4\7\0\2\4\21\0"+
    "\2\4\1\113\7\4\1\0\12\4\1\0\2\4\1\114"+
    "\3\4\7\0\2\4\21\0\1\4\1\110\1\0\7\4"+
    "\1\0\12\4\1\0\6\4\7\0\2\4\21\0\2\4"+
    "\1\0\6\4\1\115\1\0\12\4\1\0\6\4\7\0"+
    "\2\4\21\0\2\4\1\0\7\4\1\116\12\4\1\0"+
    "\3\4\1\117\2\4\7\0\2\4\21\0\2\4\1\0"+
    "\2\4\1\120\4\4\1\0\12\4\1\0\6\4\7\0"+
    "\2\4\34\0\1\121\52\0\2\4\1\0\2\4\1\122"+
    "\4\4\1\0\12\4\1\0\6\4\7\0\2\4\21\0"+
    "\2\4\1\0\7\4\1\0\3\4\1\123\6\4\1\0"+
    "\6\4\7\0\2\4\21\0\2\4\1\0\7\4\1\0"+
    "\1\66\11\4\1\0\6\4\7\0\2\4\21\0\2\4"+
    "\1\0\5\4\1\124\1\4\1\0\12\4\1\0\6\4"+
    "\7\0\2\4\21\0\2\4\1\125\7\4\1\0\12\4"+
    "\1\0\2\4\1\126\3\4\7\0\2\4\21\0\2\4"+
    "\1\0\2\4\1\127\4\4\1\0\12\4\1\0\6\4"+
    "\7\0\2\4\21\0\2\4\1\0\7\4\1\0\10\4"+
    "\1\130\1\4\1\0\6\4\7\0\2\4\21\0\2\4"+
    "\1\0\7\4\1\0\1\131\11\4\1\0\6\4\7\0"+
    "\2\4\20\0\35\73\1\132\1\23\27\73\36\133\1\134"+
    "\4\133\1\135\22\133\12\0\1\136\31\0\2\75\24\0"+
    "\1\137\3\0\1\137\1\0\1\137\3\0\3\137\23\0"+
    "\2\137\64\0\2\77\1\140\17\0\35\100\2\0\2\100"+
    "\1\0\10\100\1\0\13\100\4\0\1\44\62\0\2\4"+
    "\1\0\1\66\6\4\1\0\12\4\1\0\6\4\7\0"+
    "\2\4\32\0\1\141\64\0\1\142\55\0\2\4\1\0"+
    "\4\4\1\126\2\4\1\0\12\4\1\0\6\4\7\0"+
    "\2\4\21\0\2\4\1\0\5\4\1\66\1\4\1\0"+
    "\12\4\1\0\6\4\7\0\2\4\21\0\2\4\1\0"+
    "\7\4\1\0\3\4\1\143\6\4\1\0\6\4\7\0"+
    "\2\4\21\0\2\4\1\0\6\4\1\144\1\0\12\4"+
    "\1\0\6\4\7\0\2\4\33\0\1\44\16\0\1\44"+
    "\34\0\2\4\1\0\7\4\1\44\12\4\1\0\3\4"+
    "\1\66\2\4\7\0\2\4\21\0\2\4\1\0\7\4"+
    "\1\0\3\4\1\145\6\4\1\0\6\4\7\0\2\4"+
    "\32\0\1\44\54\0\2\4\1\0\6\4\1\66\1\0"+
    "\12\4\1\0\6\4\7\0\2\4\21\0\2\4\1\0"+
    "\6\4\1\146\1\0\12\4\1\0\6\4\7\0\2\4"+
    "\23\0\1\147\25\0\1\147\35\0\2\4\1\0\3\4"+
    "\1\150\3\4\1\0\12\4\1\0\6\4\7\0\2\4"+
    "\21\0\2\4\1\0\7\4\1\113\12\4\1\0\3\4"+
    "\1\114\2\4\7\0\2\4\21\0\2\4\1\0\7\4"+
    "\1\151\12\4\1\0\3\4\1\112\2\4\7\0\2\4"+
    "\31\0\1\116\55\0\2\4\1\0\5\4\1\117\1\4"+
    "\1\0\12\4\1\0\6\4\7\0\2\4\21\0\2\4"+
    "\1\0\6\4\1\152\1\0\12\4\1\0\6\4\7\0"+
    "\2\4\21\0\2\4\1\0\5\4\1\153\1\4\1\0"+
    "\12\4\1\0\6\4\7\0\2\4\21\0\2\4\1\147"+
    "\7\4\1\0\12\4\1\0\2\4\1\154\3\4\7\0"+
    "\2\4\20\0\36\71\1\23\27\71\36\133\1\134\4\133"+
    "\1\155\22\133\43\156\1\157\22\156\36\71\1\72\3\71"+
    "\1\160\1\135\22\71\44\0\2\161\1\0\1\162\30\0"+
    "\1\136\31\0\2\140\34\0\1\163\63\0\1\164\54\0"+
    "\2\4\1\0\7\4\1\0\1\165\11\4\1\0\6\4"+
    "\7\0\2\4\21\0\2\4\1\0\7\4\1\0\12\4"+
    "\1\44\4\4\1\66\1\4\7\0\2\4\21\0\2\4"+
    "\1\0\1\4\1\166\5\4\1\0\12\4\1\0\6\4"+
    "\7\0\2\4\25\0\1\167\61\0\2\4\1\0\7\4"+
    "\1\0\1\170\11\4\1\0\6\4\7\0\2\4\32\0"+
    "\1\171\54\0\2\4\1\0\7\4\1\0\1\172\11\4"+
    "\1\0\6\4\7\0\2\4\21\0\2\4\1\0\6\4"+
    "\1\173\1\0\12\4\1\0\6\4\7\0\2\4\21\0"+
    "\2\4\1\0\1\4\1\174\5\4\1\0\12\4\1\0"+
    "\6\4\7\0\2\4\20\0\36\133\1\134\3\133\1\160"+
    "\1\155\22\133\42\156\1\23\1\157\22\156\44\0\2\161"+
    "\40\0\1\175\70\0\1\176\43\0\2\4\1\0\7\4"+
    "\1\0\1\177\11\4\1\0\6\4\7\0\2\4\21\0"+
    "\2\4\1\0\1\114\6\4\1\0\12\4\1\0\6\4"+
    "\7\0\2\4\35\0\1\44\51\0\2\4\1\0\1\4"+
    "\1\66\5\4\1\0\12\4\1\0\6\4\7\0\2\4"+
    "\21\0\2\4\1\0\7\4\1\0\4\4\1\200\5\4"+
    "\1\0\6\4\7\0\2\4\21\0\2\4\1\0\7\4"+
    "\1\0\7\4\1\201\2\4\1\0\6\4\7\0\2\4"+
    "\21\0\2\4\1\0\7\4\1\0\1\4\1\66\10\4"+
    "\1\0\6\4\7\0\2\4\37\0\1\202\60\0\1\203"+
    "\54\0\2\4\1\0\7\4\1\0\3\4\1\204\6\4"+
    "\1\0\6\4\7\0\2\4\21\0\2\4\1\0\7\4"+
    "\1\0\3\4\1\205\6\4\1\0\6\4\7\0\2\4"+
    "\21\0\2\4\1\0\6\4\1\206\1\0\12\4\1\0"+
    "\6\4\7\0\2\4\36\0\1\116\54\0\1\207\61\0"+
    "\2\4\1\0\7\4\1\0\12\4\1\0\1\66\5\4"+
    "\7\0\2\4\21\0\2\4\1\0\7\4\1\0\2\4"+
    "\1\117\7\4\1\0\6\4\7\0\2\4\21\0\2\4"+
    "\1\0\1\4\1\210\5\4\1\0\12\4\1\0\6\4"+
    "\7\0\2\4\26\0\1\113\60\0\2\4\1\0\2\4"+
    "\1\114\4\4\1\0\12\4\1\0\6\4\7\0\2\4"+
    "\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6588];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\1\11\5\1\1\11\11\1\1\0"+
    "\1\11\1\0\11\1\1\0\11\1\1\0\1\11\1\1"+
    "\1\0\1\1\3\0\1\11\2\0\2\1\1\0\4\1"+
    "\1\0\2\1\1\0\2\1\1\0\3\1\1\0\5\1"+
    "\1\0\1\1\2\0\1\1\3\0\4\1\1\0\1\1"+
    "\1\0\3\1\3\0\2\1\3\0\2\1\1\0\1\1"+
    "\1\11\3\1\2\0\3\1\2\0\3\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

public ArrayList<Yytoken> tokens; /* our variable for storing token's info that will be the output */

private String typeReservedWords(String text){
    return  "T_" + text.substring(0, 1).toUpperCase() + text.substring(1);
}

private String typeNumbers(String text, String type){
    return type + "(value = " + text + ")";
}

private String isError(String token, int line, int column, int length, String error){
    int aux = column + length;
    return "*** Line " +line+ " *** Cols "+column+"-"+aux+" *** " + error + " \'" + token +"\'";
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalScanner(java.io.Reader in) {
  this.tokens = new ArrayList<Yytoken>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Unrecognized char", true)); return new Yytoken(yytext(), yyline, yycolumn, "Unrecognized char", true);
            }
          case 11: break;
          case 2: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "T_Identifier", false)); return new Yytoken(yytext(), yyline, yycolumn, "T_Identifier", false);
            }
          case 12: break;
          case 3: 
            { /* ignore */
            }
          case 13: break;
          case 4: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false);
            }
          case 14: break;
          case 5: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_IntConstant"), false)); return new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_IntConstant"), false);
            }
          case 15: break;
          case 6: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false);
            }
          case 16: break;
          case 7: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "The character '*/' can not be found", true)); return new Yytoken(yytext(), yyline, yycolumn, "The character '*/' can not be found", true);
            }
          case 17: break;
          case 8: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_DoubleConstant"), false)); return new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_DoubleConstant"), false);
            }
          case 18: break;
          case 9: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "T_String", false)); return new Yytoken(yytext(), yyline, yycolumn, "T_String", false);
            }
          case 19: break;
          case 10: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "T_LogicalConstant", false)); return new Yytoken(yytext(), yyline, yycolumn, "T_LogicalConstant", false);
            }
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
