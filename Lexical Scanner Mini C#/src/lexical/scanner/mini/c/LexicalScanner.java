/* The following code was generated by JFlex 1.6.1 */

/* User code */
package lexical.scanner.mini.c;

//Java Libraries

import java.util.ArrayList;
import java_cup.runtime.Symbol;

class Yytoken{
    public String token;
    public int line;
    public int column;
    public int length;
    public String type;
    public boolean error;

    Yytoken(String token, int line, int column, String type, boolean error){
        this.token = token;
        this.line = line+1;
        this.column = column+1;
        this.length = token.length()-1;
        this.type = type;
        this.error = error;
    }

    public String toString(){
        int aux = column + length;
        if(this.type.equals("T_Identifier")){
            if(token.length() > 31){
                String temp = this.token.substring(0,31);
                String aditional = this.token.substring(31);
                return temp + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type + " Number of characters greater than 31 - Discarded characters {"+aditional+"}";
            }
            else{
                return token + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type;
            }
        }
        else{
            return token + "\t\tLine "+line+"\tcols "+column+"-"+aux+"\tis "+ type;
        }   
    }

    public String isError(){
        int aux = column + length;
        return "*** Error LÃ©xico. Linea: " +line+ " Columnas: "+column+"-"+aux+" *** Mensaje Error: " + type + " \'" + token +"\'";
    }
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/bryan/Documents/GitHub/Lexical-scanner-Mini-C-/Lexical Scanner Mini C#/src/lexical/scanner/mini/c/Lexer.flex</tt>
 */
public class LexicalScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\45\1\64\1\50\1\44\22\0\1\46\1\72\1\62"+
    "\1\105\1\0\1\65\1\73\1\0\1\75\1\76\1\52\1\66\1\104"+
    "\1\60\1\57\1\51\1\54\11\53\1\0\1\103\1\67\1\70\1\71"+
    "\2\0\1\30\1\37\2\56\1\61\1\56\1\36\1\42\1\33\2\42"+
    "\1\34\1\35\1\27\1\42\1\24\1\42\1\32\1\40\4\42\1\55"+
    "\2\42\1\77\1\63\1\100\1\0\1\43\1\0\1\22\1\7\1\21"+
    "\1\4\1\11\1\15\1\14\1\17\1\1\1\42\1\41\1\10\1\25"+
    "\1\2\1\5\1\26\1\42\1\13\1\12\1\3\1\6\1\20\1\16"+
    "\1\23\1\31\1\42\1\101\1\74\1\102\7\0\1\64\u1fa2\0\1\64"+
    "\1\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\23\2\3\3\2\4\2\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\1\13\1\14\2\1\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\2\1\26\27\2\1\3\1\27\1\30\3\0\1\31"+
    "\1\0\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\14\2\1\42\6\2\1\43\4\2\3\0\1\5"+
    "\1\0\3\2\1\44\1\45\1\46\1\2\1\47\1\2"+
    "\1\50\4\2\1\51\10\2\1\30\1\0\4\2\1\52"+
    "\3\2\1\53\1\54\1\55\1\56\11\2\1\57\1\2"+
    "\1\60\1\61\3\2\1\62\3\2\1\63\1\2\1\64"+
    "\3\2\1\65\1\66\2\2\1\67\1\2\1\70\1\71"+
    "\2\2\1\72\1\2\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\106\0\u0604"+
    "\0\u064a\0\106\0\u0690\0\u06d6\0\106\0\u071c\0\u0762\0\u071c"+
    "\0\u07a8\0\u07ee\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\106"+
    "\0\u0906\0\106\0\u094c\0\106\0\106\0\106\0\106\0\u0992"+
    "\0\u01a4\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c"+
    "\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac"+
    "\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc"+
    "\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u0762\0\106\0\u1180"+
    "\0\106\0\106\0\106\0\106\0\106\0\106\0\106\0\u11c6"+
    "\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6"+
    "\0\u143c\0\u1482\0\u14c8\0\u150e\0\u01a4\0\u1554\0\u159a\0\u15e0"+
    "\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810"+
    "\0\u1856\0\u189c\0\u18e2\0\u10f4\0\u1928\0\u196e\0\u19b4\0\u19fa"+
    "\0\u01a4\0\u01a4\0\u01a4\0\u1a40\0\u01a4\0\u1a86\0\u01a4\0\u1acc"+
    "\0\u1b12\0\u1b58\0\u1b9e\0\u01a4\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6"+
    "\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e14\0\u1e5a\0\u1ea0"+
    "\0\u1ee6\0\u1f2c\0\u01a4\0\u1f72\0\u1fb8\0\u1ffe\0\u01a4\0\u01a4"+
    "\0\u01a4\0\u01a4\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2"+
    "\0\u21e8\0\u222e\0\u2274\0\u01a4\0\u22ba\0\u01a4\0\u01a4\0\u2300"+
    "\0\u2346\0\u238c\0\u01a4\0\u23d2\0\u2418\0\u245e\0\u01a4\0\u24a4"+
    "\0\u01a4\0\u24ea\0\u2530\0\u2576\0\u01a4\0\u01a4\0\u25bc\0\u2602"+
    "\0\u01a4\0\u2648\0\u01a4\0\u01a4\0\u268e\0\u26d4\0\u01a4\0\u271a"+
    "\0\u01a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\7"+
    "\1\11\1\12\1\13\1\7\1\14\1\15\1\7\1\16"+
    "\1\17\2\7\1\20\2\7\1\21\2\7\1\22\2\7"+
    "\1\23\1\24\1\7\1\25\2\7\1\2\1\26\2\27"+
    "\1\30\1\0\1\31\1\32\1\33\1\34\2\7\1\35"+
    "\1\36\1\7\1\37\1\2\1\0\1\32\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\107\0\1\7"+
    "\1\60\12\7\1\61\7\7\1\62\16\7\7\0\4\7"+
    "\2\0\1\7\25\0\5\7\1\63\35\7\7\0\4\7"+
    "\2\0\1\7\25\0\12\7\1\64\3\7\1\65\24\7"+
    "\7\0\4\7\2\0\1\7\25\0\4\7\1\66\36\7"+
    "\7\0\4\7\2\0\1\7\25\0\43\7\7\0\4\7"+
    "\2\0\1\7\25\0\4\7\1\67\5\7\1\70\30\7"+
    "\7\0\4\7\2\0\1\7\25\0\7\7\1\71\12\7"+
    "\1\72\20\7\7\0\4\7\2\0\1\7\25\0\2\7"+
    "\1\73\40\7\7\0\4\7\2\0\1\7\25\0\10\7"+
    "\1\74\32\7\7\0\4\7\2\0\1\7\25\0\4\7"+
    "\1\75\14\7\1\76\21\7\7\0\4\7\2\0\1\7"+
    "\25\0\16\7\1\77\24\7\7\0\4\7\2\0\1\7"+
    "\25\0\4\7\1\100\36\7\7\0\4\7\2\0\1\7"+
    "\25\0\4\7\1\101\2\7\1\102\33\7\7\0\4\7"+
    "\2\0\1\7\25\0\12\7\1\103\30\7\7\0\4\7"+
    "\2\0\1\7\25\0\10\7\1\104\32\7\7\0\4\7"+
    "\2\0\1\7\25\0\10\7\1\105\32\7\7\0\4\7"+
    "\2\0\1\7\25\0\21\7\1\106\21\7\7\0\4\7"+
    "\2\0\1\7\25\0\10\7\1\107\32\7\7\0\4\7"+
    "\2\0\1\7\25\0\10\7\1\110\32\7\7\0\4\7"+
    "\2\0\1\7\71\0\1\27\110\0\1\27\106\0\1\111"+
    "\1\112\106\0\2\33\2\0\1\113\51\0\1\114\27\0"+
    "\2\33\1\114\1\0\1\113\101\0\2\115\31\0\45\116"+
    "\1\0\14\116\1\117\1\120\22\116\70\0\1\121\105\0"+
    "\1\122\110\0\1\123\106\0\1\124\107\0\1\125\107\0"+
    "\1\126\107\0\1\127\4\0\2\7\1\130\15\7\1\131"+
    "\22\7\7\0\4\7\2\0\1\7\25\0\25\7\1\132"+
    "\15\7\7\0\4\7\2\0\1\7\25\0\7\7\1\133"+
    "\33\7\7\0\4\7\2\0\1\7\25\0\5\7\1\134"+
    "\35\7\7\0\4\7\2\0\1\7\25\0\1\135\42\7"+
    "\7\0\4\7\2\0\1\7\25\0\5\7\1\136\35\7"+
    "\7\0\4\7\2\0\1\7\25\0\4\7\1\137\36\7"+
    "\7\0\4\7\2\0\1\7\25\0\10\7\1\140\32\7"+
    "\7\0\4\7\2\0\1\7\25\0\11\7\1\141\31\7"+
    "\7\0\4\7\2\0\1\7\25\0\2\7\1\142\40\7"+
    "\7\0\4\7\2\0\1\7\25\0\12\7\1\143\30\7"+
    "\7\0\4\7\2\0\1\7\25\0\2\7\1\144\40\7"+
    "\7\0\4\7\2\0\1\7\25\0\12\7\1\145\30\7"+
    "\7\0\4\7\2\0\1\7\25\0\7\7\1\146\33\7"+
    "\7\0\4\7\2\0\1\7\25\0\1\147\42\7\7\0"+
    "\4\7\2\0\1\7\25\0\1\150\42\7\7\0\4\7"+
    "\2\0\1\7\25\0\1\7\1\151\41\7\7\0\4\7"+
    "\2\0\1\7\25\0\21\7\1\152\21\7\7\0\4\7"+
    "\2\0\1\7\25\0\1\153\42\7\7\0\4\7\2\0"+
    "\1\7\25\0\15\7\1\154\25\7\7\0\4\7\2\0"+
    "\1\7\25\0\21\7\1\155\21\7\7\0\4\7\2\0"+
    "\1\7\25\0\7\7\1\156\33\7\7\0\4\7\2\0"+
    "\1\7\25\0\2\7\1\157\40\7\7\0\4\7\2\0"+
    "\1\7\25\0\2\7\1\160\40\7\7\0\4\7\2\0"+
    "\1\7\24\0\44\111\1\26\1\27\40\111\51\112\1\161"+
    "\1\162\33\112\11\0\1\163\41\0\2\113\4\0\1\163"+
    "\30\0\1\164\2\0\1\164\1\0\1\164\3\0\1\164"+
    "\3\0\2\164\5\0\1\164\6\0\1\164\13\0\2\164"+
    "\1\0\1\164\2\0\1\164\77\0\2\115\2\0\1\165"+
    "\26\0\44\116\2\0\2\116\1\0\13\116\1\0\21\116"+
    "\1\0\10\7\1\166\32\7\7\0\4\7\2\0\1\7"+
    "\25\0\7\7\1\167\33\7\7\0\4\7\2\0\1\7"+
    "\25\0\7\7\1\170\33\7\7\0\4\7\2\0\1\7"+
    "\25\0\7\7\1\171\33\7\7\0\4\7\2\0\1\7"+
    "\25\0\10\7\1\172\32\7\7\0\4\7\2\0\1\7"+
    "\25\0\11\7\1\173\31\7\7\0\4\7\2\0\1\7"+
    "\25\0\6\7\1\174\34\7\7\0\4\7\2\0\1\7"+
    "\25\0\7\7\1\175\33\7\7\0\4\7\2\0\1\7"+
    "\25\0\21\7\1\176\21\7\7\0\4\7\2\0\1\7"+
    "\25\0\10\7\1\177\32\7\7\0\4\7\2\0\1\7"+
    "\25\0\10\7\1\200\32\7\7\0\4\7\2\0\1\7"+
    "\25\0\1\201\42\7\7\0\4\7\2\0\1\7\25\0"+
    "\5\7\1\202\35\7\7\0\4\7\2\0\1\7\25\0"+
    "\11\7\1\134\31\7\7\0\4\7\2\0\1\7\25\0"+
    "\7\7\1\203\33\7\7\0\4\7\2\0\1\7\25\0"+
    "\3\7\1\204\37\7\7\0\4\7\2\0\1\7\25\0"+
    "\11\7\1\205\31\7\7\0\4\7\2\0\1\7\25\0"+
    "\11\7\1\206\31\7\7\0\4\7\2\0\1\7\25\0"+
    "\1\7\1\207\41\7\7\0\4\7\2\0\1\7\25\0"+
    "\27\7\1\210\13\7\7\0\4\7\2\0\1\7\25\0"+
    "\3\7\1\211\37\7\7\0\4\7\2\0\1\7\25\0"+
    "\7\7\1\212\33\7\7\0\4\7\2\0\1\7\25\0"+
    "\36\7\1\213\4\7\7\0\4\7\2\0\1\7\25\0"+
    "\36\7\1\214\4\7\7\0\4\7\2\0\1\7\24\0"+
    "\52\161\1\162\104\161\1\27\1\162\33\161\53\0\2\215"+
    "\3\0\1\216\5\0\1\216\30\0\1\163\41\0\2\165"+
    "\4\0\1\163\25\0\12\7\1\217\30\7\7\0\4\7"+
    "\2\0\1\7\25\0\5\7\1\220\35\7\7\0\4\7"+
    "\2\0\1\7\25\0\10\7\1\221\32\7\7\0\4\7"+
    "\2\0\1\7\25\0\7\7\1\222\33\7\7\0\4\7"+
    "\2\0\1\7\25\0\40\7\1\223\2\7\7\0\4\7"+
    "\2\0\1\7\25\0\1\7\1\224\41\7\7\0\4\7"+
    "\2\0\1\7\25\0\1\7\1\225\41\7\7\0\4\7"+
    "\2\0\1\7\25\0\12\7\1\226\30\7\7\0\4\7"+
    "\2\0\1\7\25\0\10\7\1\227\32\7\7\0\4\7"+
    "\2\0\1\7\25\0\2\7\1\230\40\7\7\0\4\7"+
    "\2\0\1\7\25\0\11\7\1\231\31\7\7\0\4\7"+
    "\2\0\1\7\25\0\2\7\1\232\40\7\7\0\4\7"+
    "\2\0\1\7\25\0\12\7\1\233\30\7\7\0\4\7"+
    "\2\0\1\7\25\0\32\7\1\234\1\235\7\7\7\0"+
    "\4\7\2\0\1\7\25\0\4\7\1\236\36\7\7\0"+
    "\4\7\2\0\1\7\25\0\30\7\1\237\12\7\7\0"+
    "\4\7\2\0\1\7\25\0\30\7\1\240\12\7\7\0"+
    "\4\7\2\0\1\7\77\0\2\215\32\0\14\7\1\241"+
    "\26\7\7\0\4\7\2\0\1\7\25\0\3\7\1\242"+
    "\37\7\7\0\4\7\2\0\1\7\25\0\24\7\1\243"+
    "\16\7\7\0\4\7\2\0\1\7\25\0\10\7\1\244"+
    "\32\7\7\0\4\7\2\0\1\7\25\0\3\7\1\245"+
    "\37\7\7\0\4\7\2\0\1\7\25\0\13\7\1\246"+
    "\27\7\7\0\4\7\2\0\1\7\25\0\1\7\1\247"+
    "\41\7\7\0\4\7\2\0\1\7\25\0\12\7\1\250"+
    "\30\7\7\0\4\7\2\0\1\7\25\0\1\7\1\251"+
    "\41\7\7\0\4\7\2\0\1\7\25\0\1\252\42\7"+
    "\7\0\4\7\2\0\1\7\25\0\20\7\1\253\22\7"+
    "\7\0\4\7\2\0\1\7\25\0\2\7\1\254\40\7"+
    "\7\0\4\7\2\0\1\7\25\0\2\7\1\255\40\7"+
    "\7\0\4\7\2\0\1\7\25\0\21\7\1\256\21\7"+
    "\7\0\4\7\2\0\1\7\25\0\10\7\1\257\32\7"+
    "\7\0\4\7\2\0\1\7\25\0\10\7\1\260\32\7"+
    "\7\0\4\7\2\0\1\7\25\0\11\7\1\261\31\7"+
    "\7\0\4\7\2\0\1\7\25\0\21\7\1\262\21\7"+
    "\7\0\4\7\2\0\1\7\25\0\2\7\1\263\40\7"+
    "\7\0\4\7\2\0\1\7\25\0\1\7\1\264\41\7"+
    "\7\0\4\7\2\0\1\7\25\0\10\7\1\265\32\7"+
    "\7\0\4\7\2\0\1\7\25\0\10\7\1\266\32\7"+
    "\7\0\4\7\2\0\1\7\25\0\20\7\1\267\22\7"+
    "\7\0\4\7\2\0\1\7\25\0\1\7\1\270\41\7"+
    "\7\0\4\7\2\0\1\7\25\0\30\7\1\271\12\7"+
    "\7\0\4\7\2\0\1\7\25\0\10\7\1\272\32\7"+
    "\7\0\4\7\2\0\1\7\25\0\10\7\1\273\32\7"+
    "\7\0\4\7\2\0\1\7\25\0\10\7\1\274\32\7"+
    "\7\0\4\7\2\0\1\7\25\0\2\7\1\275\40\7"+
    "\7\0\4\7\2\0\1\7\25\0\13\7\1\276\27\7"+
    "\7\0\4\7\2\0\1\7\25\0\11\7\1\277\31\7"+
    "\7\0\4\7\2\0\1\7\25\0\10\7\1\300\32\7"+
    "\7\0\4\7\2\0\1\7\25\0\12\7\1\301\30\7"+
    "\7\0\4\7\2\0\1\7\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10080];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\1\11\2\1\1\11\2\1\1\11"+
    "\12\1\1\11\1\1\1\11\1\1\4\11\34\1\3\0"+
    "\1\11\1\0\7\11\31\1\3\0\1\1\1\0\30\1"+
    "\1\0\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private Symbol symbol(int type){
    return new Symbol(type, yyline, yycolumn, yytext());
}

private Symbol symbol(int type, Object value){
    return new Symbol(type, yyline, yycolumn, value);
}

public ArrayList<Yytoken> tokens; /* our variable for storing token's info that will be the output */

private String typeReservedWords(String text){
    return  "T_" + text.substring(0, 1).toUpperCase() + text.substring(1);
}

private String typeNumbers(String text, String type){
    return type + " (value = " + text + ")";
}

private String isError(String token, int line, int column, int length, String error){
    int aux = column + length;
    return "*** Line " +line+ " *** Cols "+column+"-"+aux+" *** " + error + " \'" + token +"\'";
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalScanner(java.io.Reader in) {
  this.tokens = new ArrayList<Yytoken>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "Unrecognized char", true)); /* It's error so it doesn't return nothing */
            }
          case 60: break;
          case 2: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "T_Identifier", false)); return symbol(sym.ident);
            }
          case 61: break;
          case 3: 
            { /* ignore */
            }
          case 62: break;
          case 4: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ArithmeticOperators);
            }
          case 63: break;
          case 5: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_IntConstant"), false)); return symbol(sym.integerConstant);
            }
          case 64: break;
          case 6: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.dot);
            }
          case 65: break;
          case 7: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.negative);
            }
          case 66: break;
          case 8: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.sum);
            }
          case 67: break;
          case 9: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.LessThanSign);
            }
          case 68: break;
          case 10: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.assignment);
            }
          case 69: break;
          case 11: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.GreaterThanSign);
            }
          case 70: break;
          case 12: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.denial);
            }
          case 71: break;
          case 13: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.OpeningParenthesis);
            }
          case 72: break;
          case 14: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ClosedParenthesis);
            }
          case 73: break;
          case 15: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.OpeningBracket);
            }
          case 74: break;
          case 16: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ClosedBracket);
            }
          case 75: break;
          case 17: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.OpeningCurlyBracket);
            }
          case 76: break;
          case 18: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ClosedCurlyBracket);
            }
          case 77: break;
          case 19: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.pyc);
            }
          case 78: break;
          case 20: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.comma);
            }
          case 79: break;
          case 21: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.PoundSign);
            }
          case 80: break;
          case 22: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.cIf);
            }
          case 81: break;
          case 23: 
            { this.tokens.add(new Yytoken("", yyline, yycolumn, "The character '*/' wasn't found", true)); /* It's error so it doesn't return nothing */
            }
          case 82: break;
          case 24: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_DoubleConstant"), false)); return symbol(sym.doubleConstant);
            }
          case 83: break;
          case 25: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeNumbers(yytext(), "T_String"), false)); return symbol(sym.stringConstant);
            }
          case 84: break;
          case 26: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.ComparisonOperators);
            }
          case 85: break;
          case 27: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.equality);
            }
          case 86: break;
          case 28: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.and);
            }
          case 87: break;
          case 29: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.or);
            }
          case 88: break;
          case 30: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.Parenthesis);
            }
          case 89: break;
          case 31: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.Brackets);
            }
          case 90: break;
          case 32: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "\'"+ yytext()+"\'", false)); return symbol(sym.CurlyBrackets);
            }
          case 91: break;
          case 33: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.INT);
            }
          case 92: break;
          case 34: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.lFor);
            }
          case 93: break;
          case 35: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sNew);
            }
          case 94: break;
          case 36: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sNull);
            }
          case 95: break;
          case 37: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, "T_LogicalConstant", false)); return symbol(sym.boolConstant);
            }
          case 96: break;
          case 38: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sThis);
            }
          case 97: break;
          case 39: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.BOOL);
            }
          case 98: break;
          case 40: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.cElse);
            }
          case 99: break;
          case 41: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sVoid);
            }
          case 100: break;
          case 42: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sBreak);
            }
          case 101: break;
          case 43: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.lWhile);
            }
          case 102: break;
          case 44: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sConst);
            }
          case 103: break;
          case 45: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sClass);
            }
          case 104: break;
          case 46: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sPrint);
            }
          case 105: break;
          case 47: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.DOUBLE);
            }
          case 106: break;
          case 48: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.STRING);
            }
          case 107: break;
          case 49: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sReturn);
            }
          case 108: break;
          case 50: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sMalloc);
            }
          case 109: break;
          case 51: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sInclude);
            }
          case 110: break;
          case 52: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sExtends);
            }
          case 111: break;
          case 53: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sGetByte);
            }
          case 112: break;
          case 54: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sSetByte);
            }
          case 113: break;
          case 55: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sNewArray);
            }
          case 114: break;
          case 56: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sReadLine);
            }
          case 115: break;
          case 57: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sInterface);
            }
          case 116: break;
          case 58: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sImplements);
            }
          case 117: break;
          case 59: 
            { this.tokens.add(new Yytoken(yytext(), yyline, yycolumn, this.typeReservedWords(yytext()), false)); return symbol(sym.sReadInteger);
            }
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
